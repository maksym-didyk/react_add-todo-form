{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","getUserByID","usersFromServer","find","userId","App","useState","visibleTodos","setVisibleTodos","setTitle","setUserId","isErrorTitle","setIsErrorTitle","isErrorUsers","setIsErrorUsers","onSubmit","event","preventDefault","trimmedTitle","trim","elementToAdd","Math","max","htmlFor","type","placeholder","autoComplete","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9221d89a.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport {\n  FC,\n  FormEvent,\n  ChangeEvent,\n  useState,\n} from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserByID(id: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === id);\n\n  return foundUser || null;\n}\n\nfunction getMaxId(todos: Todo[]): number {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserByID(todo.userId),\n}));\n\nexport const App: FC = () => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState('0');\n  const [isErrorTitle, setIsErrorTitle] = useState(false);\n  const [isErrorUsers, setIsErrorUsers] = useState(false);\n\n  const handleChangeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setIsErrorTitle(false);\n    setTitle(event.target.value);\n  };\n\n  const handleChangeUsers = (event: ChangeEvent<HTMLSelectElement>) => {\n    setIsErrorUsers(false);\n    setUserId(event.target.value);\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    const trimmedTitle = title.trim();\n    const user = getUserByID(+userId);\n\n    setIsErrorTitle(!trimmedTitle);\n    setIsErrorUsers(!user);\n\n    if (!trimmedTitle || !user) {\n      return;\n    }\n\n    const newId = getMaxId(visibleTodos);\n    const elementToAdd: Todo = {\n      id: newId,\n      title,\n      completed: false,\n      userId: user.id,\n      user,\n    };\n\n    setVisibleTodos([...visibleTodos, elementToAdd]);\n    setTitle('');\n    setUserId('0');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"newTodoTitle\">\n            Title:\n\n            <input\n              type=\"text\"\n              id=\"newTodoTitle\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title here\"\n              autoComplete=\"off\"\n              value={title}\n              onChange={handleChangeTitle}\n            />\n\n            {isErrorTitle && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"newTodoUser\">\n            User:\n\n            <select\n              id=\"newTodoUser\"\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={handleChangeUsers}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(({ id, name }) => (\n                <option\n                  value={id}\n                  key={id}\n                >\n                  {name}\n                </option>\n              ))}\n            </select>\n\n            {isErrorUsers && (\n              <span className=\"error\">Please choose a user</span>\n            )}\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}